DUNES Quick Notes & Basic Commands:


-Check Existing Dunes:
Ensure that you have Dunes in your wallet. You can use the printDunes command to check the Dunes in your wallet.

node dunes.js printDunes


-Check Dune Balance:
Use the printDuneBalance command to verify the balance of a specific Dune in your wallet.

node dunes.js printDuneBalance GREATAPE‚Ä¢NODE‚Ä¢RUNNER D9pqzxiiUke5eodEzMmxZAxpFcbvwuM4Hg


Check Safe UTXOs:
Use the printSafeUtxos command to print UTXOs in your wallet that are safe to spend.

node dunes.js printSafeUtxos



-Call file path:

cd C:\Doginals-main\Dunes-main


-To Generate a new .wallet.json file:

node dunes.js wallet new


-To send DOGE to the address displayed. Once sent, sync your wallet:

node dunes.js wallet sync


-If you are minting a lot, you can split up your UTXOs:

node dunes.js wallet split <splits>


-When you are done minting, send the funds back:

node dunes.js wallet send DMgAd3S4MfaVm2dw9uavixNCnk5fftvaxq 10

-To Deploy a dune:

node dunes.js deployOpenDune 'GOODNIGHTWEB3' <blocks> <limit-per-mint> <timestamp-deadline> <decimals> <symbol> <mint-self> <is-open>

-Example for a dune that can be minted for 100 blocks, with a limit of 100000000, a deadline of 0, 8 decimals, symbol R (emojis also work üî• üí∞ üöÄ OR ƒê symbol in example node dunes.js deployOpenDune 'DOGE‚Ä¢COIN‚Ä¢DUNES' 100 100000000 0 8 üöÄ true true  or node dunes.js deployOpenDune '‚Ä¢TO‚Ä¢THE‚Ä¢MOON' 100 100000000 0 8 üöÄ true true   both will work). First true value means 1R is minted during deploy. Second true means mints are open.


-Deploy your own:

node dunes.js deployOpenDune 'GOOD‚Ä¢NIGHT' 100 100000000 0 8 R true true


-Mint a dune:

- Example:
node dunes.js mintDune <id> <amount> <to>

-Example:

node dunes.js deployOpenDune 'TRY‚Ä¢EVEN‚Ä¢HARDER' 100 100000000 0 8 R true true

node dunes.js deployOpenDune 'TRY‚Ä¢EVEN‚Ä¢HARDER' 100 100000000 0 8 üî• true true


- Commands to OUR already deployed to mint:

node dunes.js batchMintDune '5132387/13' 100000000 10 D9UcJkdirVLY11UtF77WnC8peg6xRYsogu

- DOGECOIN‚Ä¢DUNES
node dunes.js mintDune '5120026/114' 100000000 D9UcJkdirVLY11UtF77WnC8peg6xRYsogu

- DUNES‚Ä¢TO‚Ä¢THE‚Ä¢MOON
node dunes.js mintDune '5132550/63' 100000000 D9UcJkdirVLY11UtF77WnC8peg6xRYsogu

- GET‚Ä¢DUNE‚Ä¢STONED
node dunes.js mintDune '5132520/31' 100000000 D9UcJkdirVLY11UtF77WnC8peg6xRYsogu

-TRY‚Ä¢EVEN‚Ä¢HARDER

node dunes.js mintDune '5132387/13' 100000000 D9UcJkdirVLY11UtF77WnC8peg6xRYsogu

-NODE‚Ä¢RUNNER‚Ä¢ZACH‚Ä¢XD

node dunes.js mintDune '5103129/28' 100000000 D9UcJkdirVLY11UtF77WnC8peg6xRYsogu


-NODE‚Ä¢RUNNER‚Ä¢BOOKONDOGE

node dunes.js mintDune '5103140/4' 100000000 D9UcJkdirVLY11UtF77WnC8peg6xRYsogu


-NODE‚Ä¢RUNNER‚Ä¢PEPE

node dunes.js mintDune '5103156/1549' 100000000 D9UcJkdirVLY11UtF77WnC8peg6xRYsogu


-NODE‚Ä¢RUNNER‚Ä¢DOGEWOWEGOD

node dunes.js mintDune '5103450/94' 100000000 D9UcJkdirVLY11UtF77WnC8peg6xRYsogu


-NODE‚Ä¢RUNNER‚Ä¢MODORDINNAL

node dunes.js mintDune '5103466/17' 100000000 D9UcJkdirVLY11UtF77WnC8peg6xRYsogu


NODE‚Ä¢RUNNER‚Ä¢PICCOLONAMEKGOD

node dunes.js mintDune '5103474/4' 100000000 D9UcJkdirVLY11UtF77WnC8peg6xRYsogu

NODE‚Ä¢RUNNER‚Ä¢DANNY

node dunes.js mintDune '5103482/11' 100000000 D9UcJkdirVLY11UtF77WnC8peg6xRYsogu


-NODE‚Ä¢RUNNER‚Ä¢ELTIO

node dunes.js mintDune '5103494/37' 100000000 D9UcJkdirVLY11UtF77WnC8peg6xRYsogu


-NODE‚Ä¢RUNNERS‚Ä¢UNCHAINED

node dunes.js mintDune '5103570/64' 100000000 D9UcJkdirVLY11UtF77WnC8peg6xRYsogu


-BLOCKCHAIN‚Ä¢INNOVATION

node dunes.js mintDune '5103586/13' 100000000 D9UcJkdirVLY11UtF77WnC8peg6xRYsogu


-LETS‚Ä¢MINE‚Ä¢SOME‚Ä¢BEE

node dunes.js mintDune '5103934/441' 100000000 D9UcJkdirVLY11UtF77WnC8peg6xRYsogu


-UNFUDABLE‚Ä¢NODE‚Ä¢RUNNER
node dunes.js mintDune '5103116/282' 100000000 D9UcJkdirVLY11UtF77WnC8peg6xRYsogu


-NODE‚Ä¢RUNNER‚Ä¢BEE

node dunes.js mintDune '5103430/20' 100000000 D9UcJkdirVLY11UtF77WnC8peg6xRYsogu


-NODE‚Ä¢RUNNERS‚Ä¢BEE

node dunes.js mintDune '5103541/50' 100000000 D9UcJkdirVLY11UtF77WnC8peg6xRYsogu

-NODE‚Ä¢RUNNER‚Ä¢BILLY

node dunes.js mintDune '5103103/1671' 100000000 D9UcJkdirVLY11UtF77WnC8peg6xRYsogu


-NODE‚Ä¢RUNNER‚Ä¢BILLY‚Ä¢BITCOINS

node dunes.js mintDune '5103108/116' 100000000 D9UcJkdirVLY11UtF77WnC8peg6xRYsogu


-THE‚Ä¢BIG‚Ä¢CHIEF‚Ä¢NODE‚Ä¢RUNNER

node dunes.js mintDune '5103083/14' 100000000 D9UcJkdirVLY11UtF77WnC8peg6xRYsogu


-APEx‚Ä¢NODE‚Ä¢RUNNER

node dunes.js mintDune '5103078/617' 100000000 D9UcJkdirVLY11UtF77WnC8peg6xRYsogu


-GREATAPE‚Ä¢NODE‚Ä¢RUNNER

node dunes.js mintDune '5103074/8' 100000000 D9UcJkdirVLY11UtF77WnC8peg6xRYsogu


-THE‚Ä¢NODE‚Ä¢RUNNERS

node dunes.js mintDune '5103048/12' 100000000 D9UcJkdirVLY11UtF77WnC8peg6xRYsogu



-WE‚Ä¢ARE‚Ä¢THE‚Ä¢NODE‚Ä¢RUNNERS

node dunes.js mintDune '5103058/81' 100000000 D9UcJkdirVLY11UtF77WnC8peg6xRYsogu



-WHO‚Ä¢LET‚Ä¢THE‚Ä¢DUNES‚Ä¢OUT

node dunes.js mintDune '5095478/8' 100000000 D9UcJkdirVLY11UtF77WnC8peg6xRYsogu



-THEDOGEFATHER

node dunes.js mintDune '5095509/10' 100000000 D9UcJkdirVLY11UtF77WnC8peg6xRYsogu



-DOGETOTHEMOON

node dunes.js mintDune '5097037/1145' 100000000 D9UcJkdirVLY11UtF77WnC8peg6xRYsogu

-SCOOBY‚Ä¢DOOBY‚Ä¢DOO

node dunes.js mintDune '5099193/32' 100000000 D9UcJkdirVLY11UtF77WnC8peg6xRYsogu

-JACKSONPALMER

node dunes.js mintDune '5095510/16' 100000000 D9UcJkdirVLY11UtF77WnC8peg6xRYsogu


-To Deploy a dune:

node dunes.js deployOpenDune 'RANDOM DUNE NAME' <blocks> <limit-per-mint> <timestamp-deadline> <decimals> <symbol> <mint-self> <is-open>

-Example for a dune that can be minted for 100 blocks, with a limit of 100000000, a deadline of 0, 8 decimals, symbol R. First true value means 1R is minted during deploy. Second true means mints are open.


-Deploy your own:

node dunes.js deployOpenDune 'RANDOM‚Ä¢NAME‚Ä¢HERE‚Ä¢IN‚Ä¢ALL‚Ä¢CAPS' 100 100000000 0 8 R true true


-Mint a dune:

- Example:
node dunes.js mintDune <id> <amount> <to>


-To Generate a new .wallet.json file:

node dunes.js wallet new


-To send DOGE to the address displayed. Once sent, sync your wallet:

node dunes.js wallet sync


-If you are minting a lot, you can split up your UTXOs:

node dunes.js wallet split <splits>


-When you are done minting, send the funds back:

node dunes.js wallet send DMgAd3S4MfaVm2dw9uavixNCnk5fftvaxq 369

# Wallet Commands:

-There are several commands related to wallet operations:

Mass mint a dune: 

node dunes.js batchMintDune <id> <amount> <number-of-mints> <to>

Example (this will do 100x mints):

node dunes.js batchMintDune '5106897/46' 100000000 100 DEvbE2KyPKAzDsj511wijyF1NSBN9qMcix

-Create a new wallet:

node dunes.js wallet new


-Sync the wallet:

node dunes.js wallet sync


-Check wallet balance:

node dunes.js wallet balance


-Send funds from the wallet:

node dunes.js wallet send


-Split the wallet balance:

node dunes.js wallet split 


-Check safe utxo's: prints UTXOs in your wallet that are safe to spend:

node dunes.js printSafeUtxos

-Check Balance: Use the `printDuneBalance` command to verify the balance of a specific Dune in your wallet:

node dunes.js printDuneBalance GREATAPE‚Ä¢NODE‚Ä¢RUNNER <YOUR DUNES ADDRESS>


-Check the Dunes in your wallet:

node dunes.js printDunes


-Check Successful Deploy: If you've deployed an open Dune, ensure that the deployment was successful. You can use the deployOpenDune command for this:

node dunes.js deployOpenDune <tick> <term> <limit> <deadline> <divisibility> <symbol> <mintAll> <openMint>




-----------------------------------------------------



# `getBlockCount` Command:

-This command is named "getBlockCount"

-It retrieves and logs the current block count using the getblockcount function.


program.action("getBlockCount").action(async () => {
  const res = await getblockcount();
  console.log(res.data.result);
});


#batchMintDune Command:

-This command is named "batchMintDune."
It takes several arguments, such as id, amountPerMint, amountOfMints, and receiver.
The action associated with this command performs batch minting of Dune based on the provided arguments.


program
  .command("batchMintDune")
  .argument("<id>", "id of the dune in format block/index e.g. 5927764/2")
  .argument(
    "<amountPerMint>",
    "amount to mint per mint. consider the divisibility"
  )
  .argument("<amountOfMints>", "how often you want to mint")
  .argument("<receiver>", "address of the receiver")
  .action(async (id, amountPerMint, amountOfMints, receiver) => {
    // ... (function implementation)
  });




